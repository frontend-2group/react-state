Q1. 리액트를 사용하는 이유를 설명해보세요 (2가지 이상)
    - 유지보수를 유용하게 하기 위해서 
    - 리엑트로 개발하면 리엑트 네이티브로 앱 개발도 가능해서
    - 리액트는 라이브러리기 때문에 다른 라이브러리나 프레임워크도 함께 사용 가능
    

Q2. (Q1)을 통해 얻을 수 있는 장점은 무엇일까요?
    - 컴포넌트의 구조를 명확히 표현 할 수 있어서 개발자들은 더 쉽게 코드를 이해하고 유지보수가 쉽다
    - 재사용 가능한 ui를 만들 수 있다


Q3. 리액트가 가상 돔을 사용하는 이유는 무엇일까요?
    -  실제 DOM의 변경 사항을 빠르게 파악하고 반영하기 위해

Q4. 리액트가 가상 돔과 돔 트리를 비교하여 바뀐 부분이 있다면 화면을 다시 그리는 행위를 무엇이라 할까요?
    - 리렌더링


Q5. (Q3)의 행위를 통해 얻을 수 있는 이점은 무엇일까요?
    - 무거운 작업도 빠르게 렌더링 할 수 있다


Q6. (Q3)은 리액트에서 어느 순간에 실현될까요?
    - state가 바뀔 때 마다

Q7. 훅 함수는 왜 만들게 되었을까요?
    아래의 훅 함수는 각 언제 선언되어야 할까요?
    (1) useState 
    - 상태를 바꾸기 위해서 

    (2) useRef 
    - 특정 dom요소를 불러오기 위해서  

    (3) useEffect 
    - 페이지가 생명주기 동안 일으키고 싶은 외부 효과등을 제어하기 위해서 

    (4) useCallback
    - 선언한 함수를 렌더링 되어도 다시 선언하지 않고 저장되어있던 값을 재사용하기 위해서 

    (5) useMemo
    - 랜더링 되어도 연산을 다시하지 않고 값을 저장하여 사용하기 위해서 

Q8. 커스텀 훅을 제작하면서 얻을 수 있는 이점은 무엇이고 어느 때 만들어야 할까요?
    - 반복 되는 훅함수를 재사용 할 수 있어서 반복되는 훅 함수가 있을 때 만들면 유용하다


Q9. 리액트로 프로젝트를 만들려고할 때 고려해야하는 사항들을 아는대로 작성해보세요 (3가지 이상)
    - 전역관리 
    - 컴포넌트 나누기 
    - 스타일 나누기 
    - 사용 할 라이브러리 정하기 

Q10. 만약 위의 질문에 모두 답을 했다면, 현재 부족한 것은 리액트가 아닌 자바스크립트 일 수 있습니다
    이전 풀어보았던 자바스크립트 API 문제 1~4와 board 문제를 현재 풀이할 수 있는지 확인해보세요
    
    react로 풀이를 한다고 가정했을 때와 (직접 바꿔보지는 말 것, 예제 문제와 유사)
    vanilla js(java script)로 풀이한다고 하였때 와의 차이점은 무엇일까요?

    * 위 문제를 받지 못한 수강생은 메일 전송 시 따로 첨부하여 송부

    -
    -
    

Q11. 리액트에서 컴포넌트를 나누는 기준은 어떻게 되어야할까요?
     또한, 이러한 관점은 개발자마다 다를 수 있는데 왜 그럴까요?

     - 재사용 가능한 ui를 기준으로 나눠야 한다
     - 컴포넌트를 너무 나누면 불편해하는 개발자도 있을 것 같아서..!
